#include <stdio.h>

#define MAX_N 100

typedef struct{
	int n;
	int A[MAX_N][MAX_N];
}Graph;

typedef struct{
	int size;
	int data[MAX_N];
}List;


void make_null_list(List *list){
	list->size = 0;
}

void push_back(List *list, int X){
	list->data[list->size] = X;
	list->size++;
}

void copy(List *S1, List *S2){
	make_null_list(S1);
	*S1 = *S2; 
}


int element_at(List *list, int p){
	return list->data[p-1];
}
void init_graph(Graph *pG, int n){
	pG->n = n;
	int i, j;
	for(i = 1; i <= pG->n; i++){
		for(j = 1; j <= pG->n; j++){
			pG->A[i][j] = 0;
		}
	}
}

void add_edge(Graph *pG, int x, int y){
	pG->A[x][y] = 1;
}

List neighbors(Graph *pG, int x){
	List list;
	make_null_list(&list);
	int y;
	for(y = 1; y <= pG->n; y++){
		if(x == y) continue;
		if(pG->A[x][y] == 1) push_back(&list, y);
	}
	return list;
}

int bac_vao(Graph *pG, int x){
	int y;
	int deg = 0;
	for(y = 1; y <= pG->n; y++){
		if(pG->A[y][x] != 0) deg++;
	}
	return deg;
} 

int rank[MAX_N];
int data[MAX_N];

void ranking(Graph *pG){
	int d[MAX_N];
	int y;
	for(y = 1; y <= pG->n; y++){
		d[y] = bac_vao(pG, y);
	}
	
	List S1, S2;
	
	make_null_list(&S1);
	
	for(y = 1; y <= pG->n; y++){
		if(d[y] == 0){
			
			push_back(&S1, y);
		}
	}
	 int k = 1, i;
	while(S1.size > 0){
		make_null_list(&S2);
		for(i = 1; i <= S1.size; i++){
			int  u = element_at(&S1, i);
			rank[u] = k;
			data[k] = u;
			int j;
			List list = neighbors(pG, u);
			for(j = 1; j <= list.size; j++){
				int v = element_at(&list, j);
				d[v]--;
				if(d[v] == 0) push_back(&S2, v);
			}
		}
		copy(&S1, &S2);
		k++;
	}
}

int main(){
	
//	freopen("dt.txt", "r", stdin);
	int u, v, i , n, m, e;
	Graph pG;
	scanf("%d%d", &n, &m);
	init_graph(&pG, n);
	for(e = 1; e <= m; e++){
		scanf("%d%d", &u, &v);
		add_edge(&pG, u, v);
	}
	ranking(&pG);
	int tong = 0;
	for(i = 1; i <= pG.n; i++){
		printf("%d\n", data[i]);
	}

	return 0;
}

